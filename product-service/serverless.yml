service:
  name: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: "2"

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: "webpack.config.js" # Name of webpack configuration file
  catalogItemsQueue:
    Ref: catalogItemsQueue

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  stage: dev
  httpApi:
    cors: true
  environment:
    PG_HOST: ${env:PG_HOST}
    PG_PORT: ${env:PG_PORT}
    PG_DB_NAME: ${env:PG_DB_NAME}
    PG_USER: ${env:PG_USER}
    PG_PASSWORD: ${env:PG_PASSWORD}
    SQS_URL:
      Ref: catalogItemsQueue
  iamRoleStatements:
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [catalogItemsQueue, Arn]

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: rs-aws-sqs-queue
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: rs-aws-sqs-create-product-topic
    createProductSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: pryvvid@gmail.com
        Protocol: email
        TopicArn:
          Ref: createProductTopic

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - httpApi:
          path: /products
          method: get

  getProductsById:
    handler: handler.getProductsById
    events:
      - httpApi:
          method: get
          path: /products/{id}

  createProduct:
    handler: handler.createProduct
    events:
      - httpApi:
          method: post
          path: /products

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          maximumRetryAttempts: 10
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn
